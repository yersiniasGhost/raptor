from pymodbus.client import ModbusSerialClient
from pymodbus.framer import FramerType
import csv
from datetime import datetime
import os
import time

# CRC Tables as specified in the document
AUCHCRCHI = [ 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80,
0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00,
0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40]

AUCHCRCLO = [ 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB,
0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE,
0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2,
0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E,
0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B,
0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27,
0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD,
0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8,
0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4,
0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94,
0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59,
0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D,
0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
0x41, 0x81, 0x80, 0x40]


def calculate_crc(message):
    """
    Calculate CRC exactly as specified in the document
    """
    crc_hi = 0xFF  # High byte of CRC initialized
    crc_lo = 0xFF  # Low byte of CRC initialized

    for byte in message:
        index = crc_lo ^ byte
        crc_lo = crc_hi ^ AUCHCRCHI[index]
        crc_hi = AUCHCRCLO[index]

    return (crc_hi << 8 | crc_lo)


def test_bms_communication(port='/dev/ttyS11', slave_id=1):
    """
    Test BMS communication using specified parameters
    """
    # Create Modbus client with exact specifications from document
    client = ModbusSerialClient(
        port=port,
        framer=FramerType.RTU,
        baudrate=9600,  # Default as specified
        parity='N',  # No parity as specified
        stopbits=1,  # 1 stop bit as specified
        bytesize=8,  # 8 data bits as specified
        timeout=0.2  # 200ms as specified
    )

    try:
        if not client.connect():
            print("Failed to connect!")
            return

        #print(f"Connected to {port}")

        # Test reading registers (starting from 0x0000 as per spec)
        registers_to_read = [
            (0x0000, "Current (10mA)", "int16"),
            #(0x0001, "Voltage of pack (10mV)", "uint16"),
            (0x0002, "SOC (%)", "uint16"),
            #(0x0003, "SOH (%)", "uint16"),
            #(0x0004, "Remain capacity (10mAH)", "uint16"),
            #(0x0005, "Full capacity (10mAH), "uint16"")
        ]
        output = []
        for register, description, d_type in registers_to_read:
            
            #print(f"\nReading {description}")
            # Create the message as per specification
            message = bytes([
                slave_id,  # Slave Address (0x01-0x10)
                0x03,  # Function Code (Read Registers)
                register >> 8,  # Starting Address (Hi)
                register & 0xFF,  # Starting Address (Lo)
                0x00,  # Number of Registers (Hi)
                0x01  # Number of Registers (Lo)
            ])
            #print(message)
            # Calculate CRC per specification
            crc = calculate_crc(message)

            #print(f"Message: {binascii.hexlify(message).decode()}")
            #print(f"Calculated CRC: {hex(crc)}")

            # Attempt to read
            result = client.read_holding_registers(
                address=register,
                count=1,
                slave=slave_id
            )

            if result is None:
                print("No response received")
            elif hasattr(result, 'isError') and result.isError():
                print(f"Error reading register: {result}")
            else:
                #print(f"Value: {result.registers[0]}")
                uint16_value = result.registers[0]
                if d_type == "int16":
                    if uint16_value > 32767:
                        value = (uint16_value - 65535) / 100
                    else:
                        value = uint16_value / 100
                else:
                    value = uint16_value

                print(f"Unit: {slave_id} {description}: {d_type}: {value}")
                #print(uint16_value)
                output.append((description, value))
                # For INT8, you need to extract the bytes
                # Higher byte
                int8_high = (result.registers[0] >> 8) & 0xFF
                # Lower byte
                int8_low = result.registers[0] & 0xFF

                #print(f"INT16 Value: {int16_value}")
                #print(f"UINT16 Value: {uint16}")
                #print(f"INT8 High Byte: {int8_high}")
                #print(f"INT8 Low Byte: {int8_low}")


            # Wait for frame interval as specified (>100ms)
            time.sleep(0.15)
        return output 
    except Exception as e:
        print(f"Error: {e}")
    finally:
        client.close()

def write_to_csv(slave_id, data_list):
    """
    Write Modbus data to CSV with timestamp
    data_list: List of tuples [(name, value)]
    """
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    filename = f'modbus_slave_{slave_id}.csv'
    file_exists = os.path.exists(filename)
    
    with open(filename, 'a', newline='') as csvfile:
        fieldnames = ['Timestamp'] + [name for name, _ in data_list]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        # Write header if file is new
        if not file_exists:
            writer.writeheader()
        
        # Create row with timestamp and values
        row_data = {'Timestamp': timestamp}
        row_data.update({name: value for name, value in data_list})
        writer.writerow(row_data)

if __name__ == "__main__":
    cnt = 0
    while(cnt < 1000000000):
        # Get data from each slave
        r1 = test_bms_communication(slave_id=1)
        r2 = test_bms_communication(slave_id=2)
        r3 = test_bms_communication(slave_id=3)
        
        # Write data for each slave to its own CSV file
        if r1:  # Only write if we got valid data
            write_to_csv(1, r1)
        if r2:
            write_to_csv(2, r2)
        if r3:
            write_to_csv(3, r3)
            
        print(f"Data logged at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("---------")
        cnt += 1
        time.sleep(30)


#if __name__ == "__main__":
    # Test with default slave ID 1 (0x01)
    #cnt = 0
    #while(cnt < 100):
        #test_bms_communication(slave_id=1)
        #test_bms_communication(slave_id=2)
        #test_bms_communication(slave_id=3)
        #print("---------")
        #cnt += 1
        ##time.sleep(5)
